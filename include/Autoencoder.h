//// Created by Yang Bo on 2020/5/9.//#ifndef KITSUNE_CPP_AUTOENCODER_H#define KITSUNE_CPP_AUTOENCODER_H#include <cstdio>#include "utils.h"/** *  自编码器类 */class AE {private:    double learning_rate; // 学习率    // 可见层的大小, 隐层大小    int visible_size, hidden_size;    // 输入层到隐层的权重, 因为两边对称, 隐层到输入层权重是w的转置    // 输入的x为列向量, 右乘这个矩阵得到隐层列向量,    // 所以w是 hidden_size行, visible_size 列    double **w = nullptr;    // 隐层的阈值, 可见层的阈值    double *hbias = nullptr, *vbias = nullptr;    // 激活函数    //double (*active_func)(double);    // 计算的时候需要用的临时变量数组(每次都申请的话会消耗很大)    double *tmp_x, *tmp_y, *tmp_z, *tmp_g;    // 0-1归一化需要维护的最大值最小值    double *min_v, *max_v;    // 执行编码过程, 将tmp_x变换到隐层,临时保存在tmp_y里    void encode();    // 执行解码过程, 将隐藏tmp_y变换到输出层, 临时保存在tmp_z里    void decode();    // 0-1归一化, 结果保存在tmp_x里    void normalize(const double *x);public:    // 构造函数, 参数是显层,隐层的个数, 学习率, 默认0.01    AE(int v_sz, int h_sz, double _learning_rate = 0.01);    // 构造函数, 从文件中读取已经训练的模型    AE(const char *filename);    // 析构函数    ~AE();    // 重建, 返回重建的 均根误差    double reconstruct(const double *x);    // 训练, 返回重建的 均根误差    double train(const double *x);    // 将当前训练的模型保存在file里面    void saveToFile(const char *filename);};#endif //KITSUNE_CPP_AUTOENCODER_H